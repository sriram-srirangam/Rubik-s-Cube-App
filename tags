!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/3fdf28b/
_	rubiks_cube_project_with_hough.py	/^centers, _ = kmeans(all_colors, k_or_guess = 6)$/;"	v
add_line_to_img	rubiks_cube_project_with_hough.py	/^    def add_line_to_img(img, m, b):$/;"	f	function:get_corners_hough	file:
all_centers	rubiks_cube_project_with_hough.py	/^all_centers = [centers[label] for label in labels]$/;"	v
all_colors	rubiks_cube_project_with_hough.py	/^all_colors = []$/;"	v
app	rubiks.py	/^app = Flask(__name__)$/;"	v
are_perp	rubiks_cube_project_with_hough.py	/^    def are_perp(m1, m2):$/;"	f	function:get_corners_hough	file:
bottom_left	test.py	/^bottom_left = x_min, y_max$/;"	v
bottom_right	test.py	/^bottom_right = x_max, y_max$/;"	v
centers	rubiks_cube_project_with_hough.py	/^centers, _ = kmeans(all_colors, k_or_guess = 6)$/;"	v
compute_homography	rubiks_cube_project_code.py	/^def compute_homography(img_name, x, y):$/;"	f
compute_homography	rubiks_cube_project_with_hough.py	/^def compute_homography(img_name, x, y):$/;"	f
coordinates	test.py	/^coordinates = zip(indices[0], indices[1])$/;"	v
create_side_model	rubiks_cube_project_code.py	/^        def create_side_model(side_colors):$/;"	f	function:plot_cube_layout	file:
create_side_model	rubiks_cube_project_with_hough.py	/^        def create_side_model(side_colors):$/;"	f	function:plot_cube_layout	file:
dataset	rubiks_cube_project_code.py	/^dataset = "4"$/;"	v
dataset	rubiks_cube_project_with_hough.py	/^dataset = "7t"$/;"	v
dists	rubiks_cube_project_with_hough.py	/^    dists = []$/;"	v
dst	test.py	/^dst = np.vstack((x2, y2)).T$/;"	v
edges	test.py	/^edges = cv2.Canny(img[:3200, :2100],300,300)$/;"	v
f	rubiks_cube_project_code.py	/^f = 4$/;"	v
f	rubiks_cube_project_with_hough.py	/^f = 4$/;"	v
f	test.py	/^f = 4$/;"	v
face_center_labels	rubiks_cube_project_with_hough.py	/^face_center_labels = [labels[9*i+4] for i in range(6)]$/;"	v
find_corners	rubiks_cube_project_with_hough.py	/^    def find_corners(corners):$/;"	f	function:get_corners_hough	file:
get_corners_canny	rubiks_cube_project_code.py	/^def get_corners_canny(img_name):$/;"	f
get_corners_canny	rubiks_cube_project_with_hough.py	/^def get_corners_canny(img_name):$/;"	f
get_corners_hough	rubiks_cube_project_with_hough.py	/^def get_corners_hough(img_name):$/;"	f
get_face_colors	rubiks_cube_project_code.py	/^def get_face_colors(transformed_face):$/;"	f
get_face_colors	rubiks_cube_project_with_hough.py	/^def get_face_colors(transformed_face):$/;"	f
img	test.py	/^img = cv2.imread('left.jpg', 0)$/;"	v
img_name	rubiks_cube_project_with_hough.py	/^    img_name = "test_images\/" + side + dataset + ".jpg"$/;"	v
indices	test.py	/^indices = np.where(edges != [0])$/;"	v
input_str	rubiks_cube_project_with_hough.py	/^input_str = ""$/;"	v
labels	rubiks_cube_project_with_hough.py	/^labels = []$/;"	v
labels_to_colors	rubiks_cube_project_with_hough.py	/^labels_to_colors = [""] * 6$/;"	v
np	rubiks_cube_project_code.py	/^import numpy as np$/;"	I
np	rubiks_cube_project_with_hough.py	/^import numpy as np$/;"	I
np	test.py	/^import numpy as np$/;"	I
og_img	test.py	/^og_img = cv2.cvtColor(cv2.imread('left.jpg'), cv2.COLOR_BGR2RGB)$/;"	v
plot_cube_layout	rubiks_cube_project_code.py	/^def plot_cube_layout(all_colors, with_spaces=True):$/;"	f
plot_cube_layout	rubiks_cube_project_with_hough.py	/^def plot_cube_layout(all_colors, with_spaces=True):$/;"	f
plot_intermediate_results	rubiks_cube_project_code.py	/^plot_intermediate_results = False$/;"	v
plot_intermediate_results	rubiks_cube_project_with_hough.py	/^plot_intermediate_results = True$/;"	v
plt	rubiks_cube_project_code.py	/^from matplotlib import pyplot as plt$/;"	x
plt	rubiks_cube_project_with_hough.py	/^from matplotlib import pyplot as plt$/;"	x
plt	test.py	/^from matplotlib import pyplot as plt$/;"	x
print_solution_instructions	rubiks_cube_project_code.py	/^def print_solution_instructions(solution, face_center_labels):$/;"	f
print_solution_instructions	rubiks_cube_project_with_hough.py	/^def print_solution_instructions(solution, face_center_labels):$/;"	f
ref	rubiks_cube_project_with_hough.py	/^ref = np.zeros((6, 1, 3))$/;"	v
rubiks	rubiks.py	/^def rubiks():$/;"	f
rubiks_mm	rubiks_cube_project_code.py	/^rubiks_mm = 57$/;"	v
rubiks_mm	rubiks_cube_project_with_hough.py	/^rubiks_mm = 57$/;"	v
rubiks_mm	test.py	/^rubiks_mm = 57$/;"	v
run_solver	rubiks_cube_project_code.py	/^def run_solver():$/;"	f
save_pictures	rubiks.py	/^def save_pictures():$/;"	f
sides	rubiks_cube_project_code.py	/^sides = ["top", "left", "front", "right", "back", "bottom"]$/;"	v
sides	rubiks_cube_project_with_hough.py	/^sides = ["top", "left", "front", "right", "back", "bottom"]$/;"	v
solution	rubiks_cube_project_with_hough.py	/^solution = utils.solve(input_str, 'Kociemba')$/;"	v
solution_strs	rubiks_cube_project_with_hough.py	/^solution_strs = [str(move) for move in solution]$/;"	v
solve_for_intersections	rubiks_cube_project_with_hough.py	/^    def solve_for_intersections(m1, b1, m2, b2):$/;"	f	function:get_corners_hough	file:
src	test.py	/^src = np.vstack((x, y)).T$/;"	v
tf	rubiks_cube_project_code.py	/^from skimage import transform as tf$/;"	x
tf	rubiks_cube_project_with_hough.py	/^from skimage import transform as tf$/;"	x
tf	test.py	/^from skimage import transform as tf$/;"	x
tform	test.py	/^tform = tf.estimate_transform('projective', src, dst)$/;"	v
top_left	test.py	/^top_left = x_min, y_min$/;"	v
top_right	test.py	/^top_right = x_max, y_min$/;"	v
warped	rubiks_cube_project_with_hough.py	/^    warped = compute_homography(img_name, x, y)$/;"	v
warped	test.py	/^warped = tf.warp(og_img, inverse_map=tform.inverse, output_shape=(rubiks_mm * f, rubiks_mm * f))$/;"	v
x	rubiks_cube_project_with_hough.py	/^    y, x = get_corners_hough(img_name)$/;"	v
x	test.py	/^x = [y_min, y_min, y_max, y_max]$/;"	v
x2	rubiks_cube_project_code.py	/^x2 = [0, rubiks_mm*f, rubiks_mm*f, 0]$/;"	v
x2	rubiks_cube_project_with_hough.py	/^x2 = [0, rubiks_mm*f, rubiks_mm*f, 0]$/;"	v
x2	test.py	/^x2 = [0+1, rubiks_mm*f+1, rubiks_mm*f+1, 0+1]$/;"	v
x_list	test.py	/^x_list = list(indices[0])$/;"	v
x_max	test.py	/^x_max = max(x_list)$/;"	v
x_min	test.py	/^x_min = min(x_list)$/;"	v
y	rubiks_cube_project_with_hough.py	/^    y, x = get_corners_hough(img_name)$/;"	v
y	test.py	/^y = [x_min, x_max, x_max, x_min]$/;"	v
y2	rubiks_cube_project_code.py	/^y2 = [0, 0, rubiks_mm*f, rubiks_mm*f]$/;"	v
y2	rubiks_cube_project_with_hough.py	/^y2 = [0, 0, rubiks_mm*f, rubiks_mm*f]$/;"	v
y2	test.py	/^y2 = [0+1, 0+1, rubiks_mm*f+1, rubiks_mm*f+1]$/;"	v
y_list	test.py	/^y_list = list(indices[1])$/;"	v
y_max	test.py	/^y_max = max(y_list)$/;"	v
y_min	test.py	/^y_min = min(y_list)$/;"	v
